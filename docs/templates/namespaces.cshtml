@using FSharp.MetadataFormat
@{
  Layout = "template";
  Title = "Namespaces - " + Properties["project-name"];
}

<h1>@Model.Name</h1>

@{
    var namespaceDefinitions = new Dictionary<string, string>
    {
        {"JabberNet.bedrock", "Low-level utility routines."},
        {"JabberNet.bedrock.collections", "Collection classes not in the .Net framework"},
        {"JabberNet.bedrock.io", "Input/output classes"},
        {"JabberNet.bedrock.net", "Async network access"},
        {"JabberNet.bedrock.util", "General utilities"},
        {"JabberNet.jabber", "Jabber-specific classes"},
        {"JabberNet.jabber.client", "Client connection oriented classes"},
        {"JabberNet.jabber.connection", "Base classes for client and service connections"},
        {"JabberNet.jabber.protocol", "Jabber protocol implementation"},
        {"JabberNet.jabber.protocol.accept", "jabber:component:accept namespace, for services."},
        {"JabberNet.jabber.protocol.client", "jabber:client namespace. The meat of the protocol."},
        {"JabberNet.jabber.protocol.iq", "The jabber:iq:* namespaces."},
        {"JabberNet.jabber.protocol.stream", "etherx namespace. stream:stream and friends."},
        {"JabberNet.jabber.protocol.x", "The jabber:x:* namespaces."},
        {"JabberNet.jabber.server", "Service connections and utilties for extending the functionality of a Jabber server."},
        {"JabberNet.Muzzle", "User interface elements that might be useful if doing Jabber programming."},
        {"JabberNet.stringprep", "Library for canonicalizing Unicode strings"},
        {"JabberNet.stringprep.steps", "Steps along the path to Unicode canonicalization."},
        {"JabberNet.stringprep.unicode", "Unicode data."},
        {"JabberNet.xpnet", "Partial port of James Clark's XP XML parser to .Net. See http://www.jclark.com/xml/ for more details."}
    };
    var nsIndex = 0;
}
@foreach (var ns in Model.Namespaces)
{
  nsIndex++;
  var typedNs = (Namespace)ns;
  var allCategories =
    typedNs.Types.Select(t => t.Category)
      .Concat(typedNs.Modules.Select(m => m.Category))
      .Distinct()
      .OrderBy(s => String.IsNullOrEmpty(s) ? "ZZZ" : s);
  var allByCategory =
    allCategories
      .Select((c, i) => new {
        Name = String.IsNullOrEmpty(c) ? "Other namespace members" : c,
        Index = String.Format("{0}_{1}", nsIndex, i),
        Types = typedNs.Types.Where(t => t.Category == c).ToArray(),
        Modules = typedNs.Modules.Where(m => m.Category == c).ToArray() })
      .Where(c => c.Types.Length + c.Modules.Length > 0).ToArray();
  string definition;

<h2>@ns.Name Namespace</h2>

    if (namespaceDefinitions.TryGetValue(ns.Name, out definition))
    {
        @definition
    }
    if (allByCategory.Length > 1)
    {
    <!-- If there is more than 1 category in the type, generate TOC -->
    <ul>
      @foreach (var g in allByCategory)
      {
        <li><a href="@("#section" + g.Index.ToString())">@g.Name</a></li>
      }
    </ul>
  }
  foreach(var g in allByCategory)
  {
    if (allByCategory.Length > 1)
    {
      <h3><a class="anchor" name="@("section" + g.Index)" href="#@("section" + g.Index)">@g.Name</a></h3>
    }
    <div>
    @RenderPart("part-nested", new
    {
      Types = g.Types,
      Modules = g.Modules
    })
    </div>
  }
}
